#! /usr/bin/env bash

set -eu

source ../../config/bash/bash.env
source ../utils.sh

__.log_info "Using prefix: ${__prefix_linuxbrew:?}"

main() {
  install_linuxbrew
  install_linuxbrew_apps
}

install_linuxbrew(){
  if hash brew 2>/dev/null; then
    __.log_info 'Linuxbrew is installed, skipping...'
    brew --version
    return 0
  fi

  __.log_info 'Installing linuxbrew...'
  sudo mkdir -p "$__prefix_linuxbrew"
  CI=true /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  __.log_info 'Configuring linuxbrew...'

  set +u # some path brew want to update may not be defined yet
  brew_envs=$("$__prefix_linuxbrew/bin/brew" shellenv)
  eval "$brew_envs"
  set -u
  brew --version
}

__.brew.upinstall(){
  app_name="$1"

  if [[ -z "$app_name" ]]; then
    >&2 echo 'Usage:'
    >&2 echo '__.brew.upinstall APP_NAME'
  fi

  if brew ls --versions "$app_name" >/dev/null; then
    if grep -q "$app_name" <<< "${BREW_OUTDATED:-}"; then
      >&2 echo "Upgrading $app_name"
      HOMEBREW_NO_AUTO_UPDATE=1 brew upgrade "$app_name"
    fi
  else
    >&2 echo "Installing $app_name"
    HOMEBREW_NO_AUTO_UPDATE=1 brew install "$app_name"
  fi
}

install_linuxbrew_apps(){
  #
  # homebrew prerequisites
  #
  # newer than system git
  __.brew.upinstall git

  # newer than system curl
  __.brew.upinstall curl

  which -a git curl

  #
  # Args for easier installation, these should be also be exported in dotfiles
  #
  # see: https://docs.brew.sh/Manpage#environment
  #
  # FIXME workaround for patchelf for rust, see
  # - https://github.com/Homebrew/brew/issues/9513
  export HOMEBREW_PATCHELF_RB_WRITE=1
  export HOMEBREW_BAT=1
  export HOMEBREW_CURLRC=1
  export HOMEBREW_CURL_RETRIES=3
  export HOMEBREW_FORCE_BREWED_CURL=1
  export HOMEBREW_FORCE_BREWED_GIT=1
  export HOMEBREW_NO_AUTO_UPDATE=1
  # don't want to compile anything
  export HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK=1
  export GIT_CURL_VERBOSE=1

  #
  # extra taps
  #
  # kubeeval
  brew tap --verbose instrumenta/instrumenta

  # ctags.io
  brew tap --verbose universal-ctags/universal-ctags

  #
  # update before install
  #
  brew update > /dev/null
  BREW_OUTDATED=$(brew outdated)

  #
  # actual homebrew apps
  #

  # Linters
  # TODO migrate all linters to use LSP
  __.brew.upinstall hadolint    # Dockerfile
  __.brew.upinstall shellcheck  # shell
  __.brew.upinstall yamllint    # yaml
  __.brew.upinstall vint        # vim

  # Web dev tools
  __.brew.upinstall httpie        # better alternative for curl
  __.brew.upinstall iperf3        # measures TCP, UDP, and SCTP bandwidth
  __.brew.upinstall speedtest-cli # Test Internet speed from CLI
  __.brew.upinstall wrk           # website pressure test (better than ab)

  # CLI essentials
  __.brew.upinstall bandwhich   # Rust network traffic monitor
  __.brew.upinstall bat         # Rust alternative to cat
  __.brew.upinstall cowsay      # moo
  __.brew.upinstall dfc         # df with colour
  __.brew.upinstall git-delta   # Rust alternative to diff-so-fancy
  __.brew.upinstall glow        # Command-line markdown renderer
  __.brew.upinstall exa         # Rust alternative to ls
  __.brew.upinstall fd          # Rust alternative to find
  __.brew.upinstall fortune     # fortune teller
  __.brew.upinstall fzf         # Command-line fuzzy finder written in Go
  __.brew.upinstall hexyl       # Command-line hex viewer, alternative to xxd
  __.brew.upinstall jq          # Lightweight and flexible command-line JSON processor
  __.brew.upinstall lnav        # Curses-based tool for viewing and analyzing log files
  __.brew.upinstall lolcat      # better alternative to toilet
  __.brew.upinstall monolith    # Rust, save everything of a webpage in a single HTML!
  __.brew.upinstall nyancat     # Nyan
  __.brew.upinstall rg          # Rust alternative to grep
  __.brew.upinstall sk          # Rust alternative to fzf, TODO: try this out
  __.brew.upinstall spark       # handy CLI spark line
  __.brew.upinstall tealdeer    # Rust alternative to tldr
  __.brew.upinstall tmux        # Terminal multiplexer

  # Docker dev essentials
  # FIXME docker-compose over socks5 proxy has installation problems
  # __.brew.upinstall docker-compose  # Isolated development environments using Docker
  __.brew.upinstall kubectl         # Kubernetes command-line interface
  __.brew.upinstall kubectx         # Quick switch between kubectl contexts and create aliases
  __.brew.upinstall kubeval         # Validate your Kubernetes configurations
  __.brew.upinstall kubeseal        # Kubernetes controller and tool for one-way encrypted Secrets
  __.brew.upinstall kustomize       # Template-free customization of Kubernetes YAML manifests

  # ctags.io: maintained fork of ctags
  # TODO also need upinstall for ctags
  # HACK fix cpan issue
  sudo ln -sf /usr/include/locale.h /usr/include/xlocale.h
  # FIXME brew has changed default python and this should be fixed by ctags upstream
  __.brew.upinstall python@3.8
  brew install --HEAD --without-xml universal-ctags/universal-ctags/universal-ctags

  # misc
  __.brew.upinstall aria2       # Download with resuming and segmented downloading
  __.brew.upinstall inxi        # Full featured CLI system information tool
  __.brew.upinstall neofetch    # Fast, highly customisable system info script
  __.brew.upinstall youtube-dl  # Download YouTube videos from the command-line

  #
  # Brew post-installation chores
  # TODO
  # - find a better way to handle pre/post install

  # set up tpm for tmux
  local tpm_dir="$XDG_CONFIG_HOME/tmux/plugins/tpm"
  __.log_info 'Setting up tpm for tmux...'
  if [[ -d "$tpm_dir" ]]; then
    __.log_info "Updating existing dir at: $tpm_dir"
    git -C "$tpm_dir" pull
  else
    __.log_info "Creating tpm dir at: $tpm_dir"
    git clone https://github.com/tmux-plugins/tpm "$tpm_dir"
  fi

  # set up fzf
  "$(brew --prefix)/opt/fzf/install" --xdg --key-bindings --completion --no-update-rc --no-zsh --no-fish

  unset BREW_OUTDATED
}

main

# vim: set autoindent expandtab nowrap number textwidth=119 tabstop=2 shiftwidth=2 :
