#! /usr/bin/env bash

set -eu

source ../../config/bash/bash.env
source ../utils.sh

__.log_info "Using prefix: ${__prefix_linuxbrew:?}"

main() {
  install_linuxbrew
  install_linuxbrew_apps
}

install_linuxbrew(){
  if hash brew 2>/dev/null; then
    __.log_info 'Linuxbrew is installed, skipping...'
    brew --version
    return 0
  fi

  __.log_info 'Installing linuxbrew...'
  getent group linuxbrew || sudo groupadd linuxbrew
  sudo usermod --append --groups linuxbrew "$USER"
  __.log_info "Added $USER to linuxbrew group, you need to logout and log in again to make it work."

  sudo mkdir --parents "$__prefix_linuxbrew"
  sudo chown --recursive "$(whoami):linuxbrew" "$__prefix_linuxbrew"

  (
    cd "$__prefix_linuxbrew"

    git init --quiet
    git config remote.origin.url https://github.com/Homebrew/brew
    git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
    git config core.autocrlf false
    git fetch origin --force
    git fetch origin --tags --force
    git reset --hard origin/master

    sudo mkdir --parents \
      Cellar \
      etc \
      include \
      lib \
      opt \
      sbin \
      share \
      var/homebrew/linked
    sudo chmod --recursive ug+rwx \
      Cellar \
      etc \
      include \
      lib \
      opt \
      sbin \
      share \
      var/homebrew/linked
  )
  sudo chown --recursive "$(whoami):linuxbrew" "$__prefix_linuxbrew"

  __.log_info 'Configuring linuxbrew...'

  set +u # some path brew want to update may not be defined yet
  brew_envs=$("$__prefix_linuxbrew/bin/brew" shellenv)
  eval "$brew_envs"
  set -u
  brew --version
}

__.brew.upinstall(){
  app_name="$1"

  if [[ -z "$app_name" ]]; then
    >&2 echo 'Usage:'
    >&2 echo '__.brew.upinstall APP_NAME'
  fi

  if brew ls --versions "$app_name" >/dev/null; then
    if grep -q "$app_name" <<< "${BREW_OUTDATED:-}"; then
      >&2 echo "Upgrading $app_name"
      HOMEBREW_NO_AUTO_UPDATE=1 brew upgrade "$app_name"
    fi
  else
    >&2 echo "Installing $app_name"
    HOMEBREW_NO_AUTO_UPDATE=1 brew install "$app_name"
  fi
}

install_linuxbrew_apps(){
  #
  # Args for easier installation, these should be also be exported in dotfiles
  #
  # also if we need proxy:
  # export all_proxy=socks5://$HOST:$PORT
  export HOMEBREW_BAT=1
  export HOMEBREW_CURLRC=1
  export HOMEBREW_CURL_RETRIES=3
  export HOMEBREW_FORCE_BREWED_CURL=1
  export HOMEBREW_FORCE_BREWED_GIT=1
  export HOMEBREW_NO_AUTO_UPDATE=1
  export GIT_SSL_NO_VERIFY=true
  export GIT_CURL_VERBOSE=1

  #
  # homebrew prerequisites
  #
  # newer than system git
  __.brew.upinstall git

  # newer than system curl
  __.brew.upinstall curl

  which -a git curl

  #
  # HACK workaround self-signed certificates, should have better injectable solutions
  #
  echo insecure >> ~/.curlrc
  git config --global http.sslVerify false

  #
  # extra taps
  #
  # kubeeval
  brew tap --verbose instrumenta/instrumenta

  # ctags.io
  brew tap --verbose universal-ctags/universal-ctags

  #
  # update before install
  #
  brew update > /dev/null
  BREW_OUTDATED=$(brew outdated)

  #
  # actual homebrew apps
  #

  # Dev essentials
  __.brew.upinstall tmux
  # TODO find a better way to handle pre/post install
  if [[ -d ~/.tmux/plugins/tpm ]]; then
    git -C ~/.tmux/plugins/tpm pull
  else
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  fi

  # Linters
  # TODO migrate all linters to use LSP
  __.brew.upinstall hadolint    # Dockerfile
  __.brew.upinstall shellcheck  # shell
  __.brew.upinstall yamllint    # yaml

  # Web dev tools
  __.brew.upinstall httpie        # better alternative for curl
  __.brew.upinstall iperf3        # measures TCP, UDP, and SCTP bandwidth
  __.brew.upinstall speedtest-cli # Test Internet speed from CLI
  __.brew.upinstall wrk           # website pressure test (better than ab)

  # CLI essentials
  __.brew.upinstall bat     # Rust alternative for cat
  __.brew.upinstall cowsay  # moo
  __.brew.upinstall dfc     # df with colour
  __.brew.upinstall exa     # Rust alternative for ls
  __.brew.upinstall fd      # Rust alternative for find
  __.brew.upinstall fortune # fortune teller
  __.brew.upinstall jq      # Lightweight and flexible command-line JSON processor
  __.brew.upinstall lnav    # Curses-based tool for viewing and analyzing log files
  __.brew.upinstall lolcat  # better alternative to toilet
  __.brew.upinstall nyancat # Nyan
  __.brew.upinstall rg      # Rust alternative for grep
  __.brew.upinstall spark   # handy CLI spark line

  # Docker dev essentials
  # FIXME docker-compose over socks5 proxy has installation problems
  # __.brew.upinstall docker-compose  # Isolated development environments using Docker
  __.brew.upinstall kubectl         # Kubernetes command-line interface
  __.brew.upinstall kubectx         # Quick switch between kubectl contexts and create aliases
  __.brew.upinstall kubeval         # Validate your Kubernetes configurations
  __.brew.upinstall kubeseal        # Kubernetes controller and tool for one-way encrypted Secrets
  __.brew.upinstall kustomize       # Template-free customization of Kubernetes YAML manifests

  # ctags.io: maintained fork of ctags
  # TODO also need upinstall for ctags
  # HACK fix cpan issue
  sudo ln -sf /usr/include/locale.h /usr/include/xlocale.h
  brew install --HEAD universal-ctags/universal-ctags/universal-ctags

  # misc
  __.brew.upinstall aria2       # Download with resuming and segmented downloading
  __.brew.upinstall youtube-dl  # Download YouTube videos from the command-line

  unset BREW_OUTDATED
}

main

# vim: set autoindent expandtab nowrap number textwidth=119 tabstop=2 shiftwidth=2 :
