#! /usr/bin/env bash

set -eu

source ../../config/bash/bash.env
source ../utils.sh

__.log_info "Using prefix: ${__prefix_linuxbrew:?}"

main() {
  install_linuxbrew
  install_linuxbrew_apps
}

install_linuxbrew(){
  if hash brew 2>/dev/null; then
    __.log_info 'Linuxbrew is installed, skipping...'
    brew --version
    return 0
  fi

  __.log_info 'Installing linuxbrew...'
  getent group linuxbrew || sudo groupadd linuxbrew
  sudo usermod --append --groups linuxbrew "$USER"
  __.log_info "Added $USER to linuxbrew group, you need to logout and log in again to make it work."

  sudo mkdir --parents "$__prefix_linuxbrew"
  sudo chown --recursive "$(whoami):linuxbrew" "$__prefix_linuxbrew"

  git clone --quiet --depth 1 https://github.com/Homebrew/brew "$__prefix_linuxbrew"
  (
    cd "$__prefix_linuxbrew"
    sudo mkdir --parents \
      Cellar \
      etc \
      include \
      lib \
      opt \
      sbin \
      share \
      var/homebrew/linked
    sudo chmod --recursive ug+rwx \
      Cellar \
      etc \
      include \
      lib \
      opt \
      sbin \
      share \
      var/homebrew/linked
  )
  sudo chown --recursive "$(whoami):linuxbrew" "$__prefix_linuxbrew"

  __.log_info 'Configuring linuxbrew...'

  set +u # some path brew want to update may not be defined yet
  brew_envs=$("$__prefix_linuxbrew/bin/brew" shellenv)
  eval "$brew_envs"
  set -u
  brew --version
}

__.brew.upinstall(){
  app_name="$1"

  if [[ -z "$app_name" ]]; then
    >&2 echo 'Usage:'
    >&2 echo '__.brew.upinstall APP_NAME'
  fi

  if brew ls --versions "$app_name" >/dev/null; then
    if grep -q "$app_name" <<< "$BREW_OUTDATED"; then
      >&2 echo "Upgrading $app_name"
      HOMEBREW_NO_AUTO_UPDATE=1 brew upgrade "$app_name"
    fi
  else
    >&2 echo "Installing $app_name"
    HOMEBREW_NO_AUTO_UPDATE=1 brew install "$app_name"
  fi
}

install_linuxbrew_apps(){
  brew update > /dev/null
  BREW_OUTDATED=$(brew outdated)

  # better alternative to find
  __.brew.upinstall fd

  # better alternative to grep
  __.brew.upinstall ag

  # another better alternative to grep
  __.brew.upinstall rg

  # newer than system git
  __.brew.upinstall git

  # newer than system tmux
  __.brew.upinstall tmux

  # TODO
  # - find a better way to handle pre/post install
  if [[ -d ~/.tmux/plugins/tpm ]]; then
    git -C ~/.tmux/plugins/tpm pull
  else
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  fi

  # open source alternative to the Cisco AnyConnect Client
  __.brew.upinstall openconnect

  # better alternative for curl
  __.brew.upinstall httpie

  # handy spark lines
  __.brew.upinstall spark

  # YGNI
  __.brew.upinstall youtube-dl

  # JSON for cli
  __.brew.upinstall jq
  # interactive cli JSON utility

  __.brew.upinstall fx
  # website pressure test (better than ab)

  __.brew.upinstall wrk
  # docker file linter

  __.brew.upinstall hadolint
  # linter for yaml

  __.brew.upinstall yamllint
  # FIXME shellcheck, no ideal way to install on a restricted machine yet

  # shell linter
  __.brew.upinstall shellcheck

  # there is no cow level
  __.brew.upinstall cowsay

  # a bit vivid
  __.brew.upinstall lolcat

  # daily fortune
  __.brew.upinstall fortune

  #
  # docker dev essentials
  #
  __.brew.upinstall minikube
  __.brew.upinstall kubectl
  __.brew.upinstall kubectx
  brew tap instrumenta/instrumenta
  __.brew.upinstall kubeval

  unset BREW_OUTDATED

  # ctags.io
  # FIXME this is problematic now
  # brew tap universal-ctags/universal-ctags
  return 0
  brew install --HEAD --with-jansson universal-ctags/universal-ctags/universal-ctags
  # __.brew.upinstall ctags
}

main

# vim: set autoindent expandtab number textwidth=119 tabstop=2 shiftwidth=2 :
