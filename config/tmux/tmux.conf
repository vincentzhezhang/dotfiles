# TODO
# - [ ] add commands for clean up tmux status, e.g. unused Windows
# - [x] tmux-nord maybe get rid of powerline fonts?
# - [ ] atomic config reloading (maybe super hard)
# - [x] add multi-timezone support
# - [x] add activity/bell ignore list
# - [?] add key binding for switch to next/prev bell/activity marker
# - [ ] try tmux-ressurect
# - [ ] add caps lock (maybe other locks) status indicator
# - [ ] add styling variables, e.g.
#   - [ ] normal mode fg/bg
#   - [ ] copy mode fg/bg
#   - [ ] alternative mode fg/bg
#   - [ ] hints/special flag mode fg/bg

#
# Tmux Plugins
#
# lazy notes:
# prefix + I: install plugins
# prefix + U: update plugins
# prefix + alt + u: remove/uninstall plugins not on the plugin list
#

#
# Plugin Settings
#

set -g @nord_tmux_no_patched_font "1"

#
# TODO fix prefix highlight
#
# The colors used for the prefix highlight can be configured:
#

# set -g @prefix_highlight_fg 'white' # default is 'colour231'
# set -g @prefix_highlight_bg 'blue'  # default is 'colour04'
# # The plugin can also be configured to show when copy mode is active. If enabled, the #{prefix_highlight} token will be replaced with the string Copy when copy mode is enabled. The style for copy mode can be configured as a comma-separated list of colors and attributes:
#
# set -g @prefix_highlight_show_copy_mode 'on'
# set -g @prefix_highlight_copy_mode_attr 'fg=black,bg=yellow,bold' # default is 'fg=default,bg=yellow'
# # The prefix prompt and copy prompt can also be configured:
#
# set -g @prefix_highlight_prefix_prompt 'Wait'
# set -g @prefix_highlight_copy_prompt 'Copy'
# # Additionally, the plugin can be configured to attach optional affixes to the value contained in #{prefix_highlight}. (e.g. < ^B >)
#
# set -g @prefix_highlight_output_prefix '< '
# set -g @prefix_highlight_output_suffix ' >'
# # The empty (shown when prefix is off) prompt and attribute can be configured, It is useful for aligning segments.
#
# set -g @prefix_highlight_empty_prompt '        '          # default is '' (empty char)
# set -g @prefix_highlight_empty_attr 'fg=default,bg=green' # default is 'fg=default,bg=default'
# # Defaultly, empty prompt can't be attached optional affixes. If you want attach affixes on empty prompt, config @prefix_highlight_empty_has_affixes to on.
#
# set -g @prefix_highlight_empty_has_affixes 'on' # default is 'off'
# set -g @prefix_highlight_empty_prompt 'Tmux'
# set -g @prefix_highlight_output_prefix '< '
# set -g @prefix_highlight_output_suffix ' >'

#
# Plugins
#
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'arcticicestudio/nord-tmux'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'my'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# TODO
# - official doc recommend to use run -b but that will invalidate all the overwrites
#   need to fix those if we want to go full async
run-shell "$XDG_CONFIG_HOME/tmux/plugins/tpm/tpm"

# Terminfo
set -g default-terminal "tmux"
# FIXME
# - newer version of bash seems breaking the readline vim mode c-operations
# set -g default-shell '/home/linuxbrew/.linuxbrew/bin/bash'
set -g default-shell '/bin/bash'
set -ga terminal-overrides ',*:Tc'      # true color support

#
# settings
#
set -g allow-rename off
set -g base-index 1
set -g bell-action none
set -g detach-on-destroy off
set -g display-panes-active-colour yellow
set -g display-panes-colour cyan
set -g display-panes-time 3000
set -g display-time 666
set -g focus-events on
set -g history-limit 99999
set -g message-style 'fg=black,bold,bg=yellow' # make it obvious
set -g mouse on
set -g pane-active-border-style "fg=cyan"
set -g pane-base-index 1
set -g pane-border-style "fg=#666666"
set -g renumber-windows on
set -g set-titles off
set -g visual-bell off
set -s set-clipboard off # needs terminal OSC 52 support
set -sg escape-time 10 # Allows for faster key repetition, also address vim mode switching delay

#
# the active pane bg settings creates unnecessary traffic so disabled temporarily
#
# set -g pane-active-border-style "fg=cyan,bg=#262B33"
# set -g pane-border-style "fg=#666666,bg=#262B33"
# set -g window-active-style 'fg=colour250,bg=#2C323B' # bg picked from vim-deus
# set -g window-active-style 'fg=colour250,bg=#2E3440' # bg picked from vim-deus
# set -g window-style 'fg=colour247,bg=#262B33' # dimmed from normal bg 23 to 20

set -ag status-left-length 18
# add more status to nord status bar
set -ag status-right '#{?pane_synchronized, #[bg=yellow]SYNC#[default],}'

#
# window settings
#
setw -g automatic-rename off
setw -g mode-style "fg=black,bg=yellow"
setw -g mode-keys vi
setw -g monitor-activity off # turns out doesn't really matter to me
setw -g status-keys vi
setw -g xterm-keys on

#
# prefix tweaks
#
unbind C-o # rotate the panes in the current window forwards
unbind C-b # default prefix
set -g prefix M-Escape
bind M-Escape send-prefix

bind -n M-q send-keys ` # easier ` input in 60% layout
bind p run-shell 'tmux paste-buffer'
bind r source-file ~/.tmux.conf \; display-message "Tmux config has been reloaded..."
bind K send-keys -R \; clear-history

# sessions
bind -n M-/ switch-client -n

#
# window bindings
#

# XXX ctrl-Tab binding won't work under xterm without lots of hackery
# TODO
# - [ ] find a better way to quick switching between windows
# - [ ] group/update different type of key-bindings by different type of actions to make it more intuitive
bind -n M-'\' split-window  -h -c "#{pane_current_path}"
bind -n M--   split-window  -v -c "#{pane_current_path}"
bind -n M-n   new-window    -c    "#{pane_current_path}" -n ''
bind -n M-1   select-window -t 1
bind -n M-2   select-window -t 2
bind -n M-3   select-window -t 3
bind -n M-4   select-window -t 4
bind -n M-5   select-window -t 5
bind -n M-6   select-window -t 6
bind -n M-7   select-window -t 7
bind -n M-8   select-window -t 8
bind -n M-9   select-window -t 9
bind -n M-b   select-window -t -1
bind -n M-f   select-window -t +1
bind '{'      swap-window   -t -1
bind '}'      swap-window   -t +1
bind -n M-w   kill-window

#
# pane bindings
#
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n M-h if-shell "$is_vim" "send-keys M-h" "select-pane -L"
bind -n M-j if-shell "$is_vim" "send-keys M-j" "select-pane -D"
bind -n M-k if-shell "$is_vim" "send-keys M-k" "select-pane -U"
bind -n M-l if-shell "$is_vim" "send-keys M-l" "select-pane -R"
bind -n M-, if-shell "$is_vim" "send-keys M-," "select-pane -l"

bind -T copy-mode-vi M-h if-shell "$is_vim" "send-keys M-h" "select-pane -L"
bind -T copy-mode-vi M-j if-shell "$is_vim" "send-keys M-j" "select-pane -D"
bind -T copy-mode-vi M-k if-shell "$is_vim" "send-keys M-k" "select-pane -U"
bind -T copy-mode-vi M-l if-shell "$is_vim" "send-keys M-l" "select-pane -R"
bind -T copy-mode-vi M-, if-shell "$is_vim" "send-keys M-," "select-pane -l"

# resize pane more efficiently, note the numbers are different between vertical and horizontal
# currently is roughly 1:4 considering the physical dimension of the monitor and the ratio of
# monospace characters
bind -n C-h resize-pane -L 20
bind -n C-j resize-pane -D 5
bind -n C-k resize-pane -U 5
bind -n C-l resize-pane -R 20
bind -n M-z resize-pane -Z

# move pane around
bind h swap-pane -s '{left-of}'
bind j swap-pane -s '{down-of}'
bind k swap-pane -s '{up-of}'
bind l swap-pane -s '{right-of}'

#
# mode bindings
#
# FIXME ultimate copy-paste vim-tmux
bind -n C-f copy-mode
bind -T copy-mode-vi C-f send-keys ?
bind -T copy-mode-vi Escape send-keys -X cancel
bind -T copy-mode-vi C-WheelUpPane send -X halfpage-up
bind -T copy-mode-vi C-WheelDownPane send -X halfpage-down
bind -T copy-mode-vi 'v' send -X begin-selection
bind -T copy-mode-vi 'r' send -X rectangle-toggle

# toggle pane synchronization
bind -n M-s set synchronize-panes \; display-message "synchronize-panes #{?synchronize-panes,on,off}"
bind -n M-m set monitor-activity \; display-message "monitor-activity #{?monitor-activity,on,off}"


#
# Maybe consider deprecating 3rd party themes and just write my own layout
# and extract the colour palette out
#
dark_separator='#[bg=black] #[fg=cyan,bg=brightblack]'

bind -n M-r display-message "prefix_highlight: #{prefix_highlight}"

# TODO see if can make individual
set -g window-status-format "#[fg=white,bg=black,dim] #{window_index} #{window_flags} "
set -g window-status-current-format "#[fg=cyan,bg=brightblack] #{window_index} #{window_flags} "
set -g window-status-separator "${dark_separator}"
set -g status-position 'top'
set -g status-justify 'left'
set -g status-left "#[fg=black,bg=cyan,bold]\
 #{session_name} \
$dark_separator\
#{prefix_highlight}"
set -g status-left-length 200
set -g status-right-length 200
set -g status-right "#[fg=black,bg=cyan,bold]\ #H "

# vim: set ai et tw=119 ts=2 :
