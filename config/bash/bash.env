#! /usr/bin/env bash
# shellcheck disable=SC1090 # we know where the source from

# ¯\_(ツ)_/¯
trap - DEBUG

#
# Setup environment variables for bash, which shared by:
#
# - bash
# - provision scripts
#

# FIXME
# - clean separation of personal/work settings
# - revist why do I want to use bash.env for provisioning
# - also, think I was not meant to replace before/after with bash.env
#   - instead, extract patterns from before/after to appropriate place, e.g. addons
#   - may also want to provide warnings for those script on performance

export __sandbox_path="/sandbox/$USER"

declare -A prefixes
declare -A executables

prefixes[conda]="$__sandbox_path/.conda"
prefixes[nvm]="$__sandbox_path/.nvm"

executables[conda]="$__sandbox_path/.conda/bin"

for name in "${!prefixes[@]}"; do
    prefix="${prefixes[$name]}"
    declare "__prefix_$name=$prefix"
done

for name in "${!executables[@]}"; do
    executable="${executables[$name]}"
    PATH="$executable:$PATH"
done

#
# TODO
# - may just get rid of nvm since we are not changing the versions too frequently anyway
node_version=$(command ls -1 "$__prefix_nvm/versions/node" | head -1)

if [[ -n "$node_version" ]]; then
    PATH="${__prefix_nvm:?}/versions/node/$node_version/bin:$PATH"
else
    >&2 echo "No node version available via nvm!"
fi

# conda envs
export __conda_env_root="${prefixes[conda]}/envs"

#
# copied from bash/before
#

# XXX the lighting is pretty consistent in the office
export LUMINANCE_OVERRIDE="normal"

#
# copied from bash/after
#

#
# Things need to be set up after eval the bashrc
#

#  ______  _____   ____    _____
# /\__  _\/\  __`\/\  _`\ /\  __`\
# \/_/\ \/\ \ \/\ \ \ \/\ \ \ \/\ \
#    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \
#     \ \ \ \ \ \_\ \ \ \_\ \ \ \_\ \
#      \ \_\ \ \_____\ \____/\ \_____\
#       \/_/  \/_____/\/___/  \/_____/
#
# extract functions to add-ons, so before after should only be setting box
# specific stuff not functional craps
#

# PATH
#
export DEV_HOME="/sandbox/$USER"
export PATH="$DEV_HOME/repos/My/snippets/bin:$PATH"

#
# conda
#
export PATH="$DEV_HOME/.conda/bin:$PATH"
# this overwrites the default behaviour which includes redundant paths, e.g. $HOME/.conda/envs

# default values from https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html

#
# FIXME workaround to mitigate some conflict caused by brew commands precede system ones
#

# miscellaneous binaries
export PATH="$DEV_HOME/bin:$PATH"

# Make rdesktop great again!
# TODO may need to change domain after move
# magic number is for the best experience, see
# rdesktop -x 0x8F mywinserver   # equals the modem default + font smoothing
# rdesktop -x 0x81 mywinserver   # equals the broadband default + font smoothing
# rdesktop -x 0x80 mywinserver   # equals the LAN default + font smoothing
rdp() {
    dimension="$(xrandr | grep -oE 'primary [0-9x]{7,9}' | cut -d ' ' -f2)"
    width=$(($(echo "$dimension" | cut -d 'x' -f 1) * 9 / 10))
    height=$(($(echo "$dimension" | cut -d 'x' -f 2) * 9 / 10))
    echo "staring RPD in ${width}x${height}..."
    nohup rdesktop -d AKUNACHINA -g "${width}x${height}" -x 0x80 -a 32 -r sound=local "${1-sha-dev-vw101}" &
}

# go to env at your fingertips
ge()
{
    if [[ -n "$__conda_env_root" ]]; then
        paths=$(find "$__conda_env_root" -maxdepth 1 -mindepth 1 -name "[!.]*")
    else
        paths=$(conda info --envs | awk '{ print $NF }' | grep '^/')
    fi

    path=$(fzf --height=50% --reverse <<<"$paths" | xargs -r echo "$@")

    [[ -d "$path" ]] && cd "$path"/lib/python*/site-packages || echo 'path not found!'
}

#
# Helper functions to make dev life easier
#

__log_s() {
    >&2 echo -e "\\e[32m$*\\e[0m"
}

__log_i() {
    >&2 echo -e "\\e[36m$*\\e[0m"
}

__log_w() {
    >&2 echo -e "\\e[33m$*\\e[0m"
}

__log_e() {
    >&2 echo -e "\\e[1;31m$*\\e[0m"
}

__conda_envs()
{
    local env_names

    if [[ ! -d "$__conda_env_root" ]]; then
        __log_w "\n\$__conda_env_root is not set, using conda info --base instead."
        __log_w "Please consider set \$__conda_env_root for faster access."
        __conda_env_root="$(conda info --base)/envs"
    fi

    env_names=$(find "$__conda_env_root" -maxdepth 1 -mindepth 1 -type d -exec basename {} \;)
    echo "$env_names"
}

# smart way to activate/deactivate conda environments
# TODO
# - [ ] it's actually quicker to do activate/deactivate myself
e()
{
    local env_name
    local current_py_env

  # deactivate current python venv if there is any
  current_py_env=$(grep -oP '\/.*conda.*/envs/(\K\w+)' <<< "$PATH")
  if [[ -n "$current_py_env" ]]; then
      echo "deactivating \"$current_py_env\" ..."
      source deactivate
      return 0
  fi

  # use env name if passed one explicitly
  env_name=$1

  # otherwise guess the envname
  if [[ -z "$env_name" ]]; then
      env_name=$(__.conda.clever_prefix | xargs --no-run-if-empty basename)
      fi

      if [[ -z "$env_name" ]]; then
          echo "cannot find a conda environment for \"$(basename "$PWD")\"!"
          return 1
      fi

      if [[ "$env_name" == "$current_py_env" ]]; then
          return 0
      fi

      source activate "$env_name"
}

__e_complete()
{
    if [[ "${#COMP_WORDS[@]}" != "2" ]]; then
        return
    fi

    mapfile -t COMPREPLY < <(grep -oE "^${COMP_WORDS[1]}[0-9a-z_-]+" < <(__conda_envs))
}

# complete -F __e_complete -o default -o bashdefault e
complete -F __e_complete e

# Start webapp server for given app
# FIXME broken
__web_server()
{
    local path
    path=$(readlink -f "$1")
    local loc=${2:-chi}
    local env=${3:-prd}
    local config
    local config_root="${DEV_CFG_ROOT:-?}/$loc"

    if [[ ! -d "$path" ]]; then
        echo "\$path: $path is not a directory!"
        return 1
    fi

    echo 'getting app name using setup.py...'
    app=$(jq --raw-output .name "$path/package.json")

  # conda info --envs
  # if ! source activate "$app"; then
  #   echo "failed to activate conda env for $app, please double check!"
  #   return 1
  # fi

  echo 'Searching for config file...'
  echo "loc: $loc"
  echo "env: $env"
  if [ -f "$config_root/$app/config.json" ]; then
      config="$config_root/$app/config.json"
  elif  [ -f "$config_root/$app.json" ]; then
      config="$config_root/$app.json"
  elif [ -f "$config_root/webapp.json" ]; then
      config="$config_root/webapp.json"
  else
      echo "no config file available!"
      return 1
  fi

  echo "------------------------------------------------------------------------"
  echo "starting $app..."
  echo "CONFIG: $config"
  echo "LOCATION: $loc"
  echo "ENV: $env"
  echo "------------------------------------------------------------------------"
  jq . "$config"
  echo "------------------------------------------------------------------------"

  echo 'launching app....'
  echo "./launch.py $app --debug -c $config -e $env --dangerously-disable-authentication"
  # ./launch.py "$app" --debug -c "$config" -e "$env" --dangerously-disable-authentication
  ./launch.py "$app" -c "$config" -e "$env" --dangerously-disable-authentication
}

locations=(ch hk)
environments=(dev prd)

for l in "${locations[@]}"; do
    for e in "${environments[@]}"; do
        eval "${l}_${e}()
        {
            if [[ -z \"\$1\" ]]; then
                echo 'Please provide an app name!'
                return 1
            fi
            __web_server \$1 ${l} ${e};
        }"
    done
done

__soldump()
{
    # soldump binary is an legacy solace Python script
    if ! hash __soldump_cli > /dev/null 2>&1; then
        >&2 echo "Cannot find soldump in path"
        return 1
    fi

    host=${1:?}
    user=${2:?}
    psw=${3:?}
    vpn=${4:?}
    cache=${5:?}
    topic="${6:-v2/instrumental_v2/cache/*}"

    2>/dev/null __soldump_cli \
        -d \
        -s "$host" \
        -v "$vpn" \
        -u "$user" \
        -p "$psw" \
        -c "$cache" \
        "$topic"
}

soldump_ch_dev()
{
    __soldump \
        ch1devsolace.akunacapital.local \
        svc_akuna_pdle_id \
        25Mku4xkznvosn \
        ch_kunlun_vpn \
        ch_kunlun_cache \
        "$1"
}

soldump_ch_prd()
{
    __soldump \
        offdevsolpri01.akunacapital.local \
        soldevapp \
        2yvno5kzz \
        prdcopy \
        prd_akuna_cache \
        "$1"
}

soldump_hk_dev()
{
    __soldump \
        shadevklun02.akunacapital.local \
        svc_akuna_pdle_id \
        25Mku4xkznvosn \
        hk_kunlun_staging_vpn \
        hk_kunlun_staging_cache \
        "$1"
}

soldump_hk_prd()
{
    __soldump \
        hkedevsol03.akunacapital.local \
        soldevapp \
        2yvno5kzz \
        hkprdcopy \
        prd_hk_akuna_cache \
        "$1"
}

tmux_pair()
{
    local me
    me=$(whoami | cut -d '.' -f 1)

    tmux -S "/tmp/$me" new-session -d -s "$me" -n work -c ~/workspace/webapp
    tmux -S "/tmp/$me" send-keys -t "$me:work" "chgrp $(id --group) /tmp/vincent" Enter
    tmux -S "/tmp/$me" attach -t "$me:work"
}

# overwrite the default command_not_found handler to mitigate with the multiple
# versions of Python issue brought by Linuxbrew and conda
command_not_found_handle ()
{
    printf "%s: command not found\n" "$1" 1>&2;
    return 127;
}

# better keyboard/mouse behavouir
# XXX this is likely to change on different box
# FIXME Maybe an adaptive way to do it?
if [[ -z "${SSH_CLIENT:-x}" ]] && [[ -z "${SSH_TTY:-x}" ]]; then
    export DISPLAY=:1
    xset r rate 250 25
    xset m 1 4
fi

lint_jenkins()
(
if [[ ! -f Jenkinsfile ]]; then
    >&2 echo "Can't find Jenkins file at $PWD!"
    return 1
fi

_lint_jenkins()
{
    clear
    # curl (REST API)
    # Assuming "anonymous read access" has been enabled on your Jenkins instance.
    JENKINS_URL=${1:-'localhost:8080'}
    # JENKINS_CRUMB is needed if your Jenkins master has CRSF protection enabled as it should
    JENKINS_CRUMB=$(curl -s -u vincent:1201 "$JENKINS_URL/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)")
    result=$(curl -s -u vincent:1201 -X POST -H "$JENKINS_CRUMB" -F "jenkinsfile=<Jenkinsfile" "$JENKINS_URL/pipeline-model-converter/validate")

    if [[ $(wc -l <<< "$result") -eq 1 ]]; then
        echo -en "\e[00;38;5;2m"
    else
        echo -en "\e[00;38;5;3m"
    fi
    echo "$result"
    echo -en "\e[0m"
}

_lint_jenkins "$@"

while inotifywait -q -e close_write Jenkinsfile; do
    _lint_jenkins "$@"
done
)

cr()
{
    # TODO
    # - add finish CR command, including features like
    #   - remove current dir
    #   - remove current worktree
    # FIXME
    # - copied from gg, can extract out as a common pattern
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        >&2 echo 'Please call me in a git repository!'
        return 1
    fi

    if ! hash fzf 2>/dev/null; then
        >&2 echo 'fzf is missing, how can you miss that?'
        return 1
    fi

    local remote_branch_name

    remote_branch_name=$(
    git branch --remotes --no-merged |\
        cut --delimiter='/' --fields 2- |\
        fzf --height=36% --reverse |\
        sort --ignore-case
    )

    if [[ -z "$remote_branch_name" ]]; then
        >&2 echo 'Please select a remote branch for code review!'
        return 1
    fi

    local review_path

    review_path=$(git worktree list | grep "$remote_branch_name" | awk '{print $1}')

    if [[ -n "$review_path" ]]; then
        >&2 echo "Switching to existing review path: $review_path ..."
    else
        review_path="/tmp/code_review/$(date +%s%N)"
        >&2 echo "Creating review at: $review_path tracking $remote_branch_name ..."

        > /dev/null mkdir -p "$review_path"
        > /dev/null git worktree add "$review_path" "$remote_branch_name"
    fi

    cd "$review_path" || return 1

    >&2 echo "Updating from remote..."
    git pull --quiet --rebase
    git --no-pager log --max-count=1 --no-decorate --stat

    >&2 echo "Finding root of changes..."

    change_root="$(git log --max-count 1 --no-merges --pretty="format:" --name-only)"

    while [[ $(echo "$change_root" | wc -l) -gt 1 || -f "$change_root" ]]; do
      change_root=$(echo "$change_root" | xargs -r dirname | sort -u)
    done

    >&2 echo "Found change root: $change_root"
    cd "$change_root" || return 1
}

kube_proxy(){
    admin_user="$(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')"

    if [[ -z $admin_user ]]; then
        >&2 echo 'no admin_user found, please double check!'
        return 1
    fi

    token=$(kubectl -n kube-system describe secret "$admin_user" | awk '$1=="token:"{print $2}')

    if [[ -z $token ]]; then
        >&2 echo "Failed to get token for user $admin_user, please double check!"
        return 1
    fi

    >&2 echo 'visit: http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/'
    >&2 echo "with token:"
    >&2 echo '------------------'
    >&2 echo "$token"
    >&2 echo '------------------'

    kubectl proxy &
}

v() {
    # TODO fetch users from the server periodically for tab completion, e.g.
    # ssh photon_chicago_dev "docker ps | grep -oP 'vscode_\K([a-z]+\.[a-z]+)' | sort -u"
    # and put into file for autocomplete
    username=${1:-vincent.zhang}

    if id "$username" > /dev/null 2>&1; then
        >&2 echo "Connecting to vscode_$username on ch1devptn01..."
        ssh photon_chicago_dev -t "docker exec -it -e COLUMNS=\"$(tput cols)\" -e LINES=\"$(tput lines)\" vscode_$username bash"
    else
        >&2 echo "User: \"$username\" not found, please double check!"
    fi
}

unset PYTHONASYNCIODEBUG

photon_image_build() {
    # TODO
    # - move out of bash.env
    # - intelligent auto completion
    version=${1:?}
    task_name=${2:-apac.hke.unwarranted.unwarranted.UnwarrantedTask}

    if ! project_root=$(git rev-parse --show-toplevel); then
        >&2 echo "Please run this function inside the trader_scripts repo!"
        return 1
    fi

    if [[ -z "$version" ]]; then
        latest_tag=$(git tag | grep "$image_name" | tail -1)
        latest_version=$(awk -F _ '{print $NF}' <<<"$latest_tag")
        next_version=$(awk -F. '/[0-9]+\./{$NF++;print}' OFS=. <<<"$latest_version")
        >&2 echo "latest_tag: $latest_tag"
        >&2 echo "latest_version: $latest_version"
        >&2 echo "next_version: $next_version"
        version=$next_version
    fi

    cat <<BASH
photon image build \
  -t $image_name \
  -v $version \
  -e /sandbox/vincent.zhang/.conda/envs/unwarranted/ \
  -g $project_root
BASH
}

viper_build() {
    set -e
    project_root=$(git rev-parse --show-toplevel)

    # --user jenkins:jenkins \
    docker run \
        -it \
        --user "$(id -u):$(id -g)" \
        --rm \
        --env conda_build=3.17.8 \
        --env env=dev \
        --env convert=false \
        --env pythons=3.6 \
        -v "$project_root":/home/jenkins/workspace \
        ch1infnex01.akunacapital.local:5543/dev/viper
}

conda_search() {
    # TODO
    # - can cache the repodata according to modified time and size
    # - can periodically update the repodata too
    keyword=${1:?}
    curl \
        --silent \
        http://swrepo.akunacapital.local/pyrepo/v3/repo/prod/linux-64/repodata.json.bz2 |\
        bzip2 -dc |\
        jq ".packages | keys_unsorted[] | select(startswith(\"$keyword\"))" |\
        sort -V
}

docker_compose_ci() {
    docker-compose --file docker-compose.ci.yaml up --build --force-recreate --remove-orphans --renew-anon-volumes --exit-code-from test --abort-on-container-exit
}

docker_compose_run() {
    docker-compose --file docker-compose.yaml up --force-recreate --remove-orphans
}

# recreate a conda env
re() {
    local path
    local env_name
    local yaml_path

    path=${1:-"$PWD"}

    if [[ -f $path ]]; then
        if [[ $path = environment.yaml ]]; then
            env_name=$(basename "$PWD")
        elif [[ $path = *.yaml ]]; then
            env_name="${path%.*}"
            yaml_path=$path
        fi
    fi

    if [[ -d $path ]]; then
        env_name=$(basename "$path")

        if [[ -f "$env_name.yaml" ]]; then
            yaml_path="$env_name.yaml"
        elif [[ -f environment.yaml ]]; then
            yaml_path="environment.yaml"
        fi
    fi

    if [[ -f "$yaml_path" ]]; then
        >&2 echo "Recreating environment \"${env_name:?}\" from file: ${yaml_path:?} ..."
        conda env remove --name "$env_name"
        conda env create --name "$env_name" --file "$yaml_path"
    elif [[ -f "tasks.py" && -f "meta.yaml" ]]; then
        >&2 echo "Recreating environment \"${env_name:?}\" using invoke tasks ..."
        conda env remove --name "$env_name"
        conda create --name "$env_name" python=3.6.8 invoke --yes
        source activate "$env_name"
        inv bootstrap develop hooks
    fi
}

export DEV_CFG_ROOT=/sandbox/vincent.zhang/repos/My/web_dev_cfg
export DEV_REPO_ROOT=/sandbox/vincent.zhang/repos

# vim: set autoindent expandtab shiftwidth=4 tabstop=4 :
