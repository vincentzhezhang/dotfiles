#! /usr/bin/env bash
#
# Uncategorized functions
#

blur_lock()
{
  # please set the lock screen background to
  # /tmp/locked_screen.png
  # before running this command
  if [[ -z $DISPLAY ]]; then
    >&2 echo 'not an interactive session, abort!'
    return 1
  fi

  if ! hash ffmpeg 2>/dev/null; then
    >&2 echo 'please install ffmepg!'
    return 1
  fi

  if ! hash loginctl 2>/dev/null; then
    >&2 echo 'not using systemd? Please configure manually!'
    return 1
  fi

  #
  # ffmpeg is much faster than the combination of scrot + imagemagick
  # roughly 300 ms vs 1000 ms
  #
  image_file=/tmp/locked_screen.png
  resolution='3200x1800'
  # resolution=$(xdpyinfo | grep dimensions | awk '{print $2}')

  # use blur filter
  filters='gblur=sigma=8'

  # use down sampling and upsampling
  # filters='noise=alls=10,scale=iw*.05:-1,scale=iw*20:-1:flags=neighbor'

  ffmpeg -y \
    -loglevel 0 \
    -s "$resolution" \
    -f x11grab \
    -i "$DISPLAY" \
    -vframes 1 \
    -vf "$filters" \
    "$image_file"

  loginctl lock-session
}

bm_cmd()
{
  cmd="$1"
  count=100
  i=0

  if [[ -z "$cmd" ]]; then
    >&2 echo 'What command do you want to measure?'
  fi

  >&2 echo 'Running 100 times...'
  perf_start=$(($(date +%s%3N)))
  # FIXME result from time seems weird and useless
  while [[ $i -lt $count ]]; do
    "$cmd" > /dev/null 2>&1
    ((i++))
  done
  perf_end=$(($(date +%s%3N)))
  t=$((perf_end - perf_start))
  avg=$(bc <<< "scale=2; $t / 100")
  >&2 echo "Ran $count in ${t}ms, avg: ${avg}ms"
}

weather()
{
  place=${1:-'shanghai,pudong,guozhan'}
  echo "loading weather for $place ..."
  curl "http://wttr.in/~$place" &
}

#
# Show/Goto Definition of a bash function
#

sd()
{
  type $1 | bat --language bash
}
complete -F __complete_gd -o nospace sd

gd()
{
  if [[ -z $1 ]]; then
    echo "What are you looking for? Try gd then press <tab>!"
  fi

  shopt -s extdebug; declare -F "$1" | awk '{ print $3" +"$2 }' | xargs --no-run-if-empty nvim
}

__complete_gd()
{
  if [ "${#COMP_WORDS[@]}" != "2" ]; then
    return
  fi
  mapfile -t COMPREPLY < <(declare -F | awk '{ print $NF }' | grep -oE "^${COMP_WORDS[1]}[0-9a-z_-]+" | sort)
}
complete -F __complete_gd -o nospace gd


#
# Goto Git branch
#
gg()
{
  if ! git rev-parse --show-toplevel > /dev/null 2>&1; then
    >&2 echo 'not a git repository!'
    return 1
  fi

  if ! hash fzf 2>/dev/null; then
    >&2 echo 'fzf is missing, how can you miss that?'
    return 1
  fi

  current_branch=$(git rev-parse --abbrev-ref HEAD)
  branch_name=$(
    git branch --no-color -a |\
    grep -vP "${current_branch}$" |\
    sed -r 's/^\s+//g' |\
    fzf --height=50% --reverse
  )

  if [[ -z "$branch_name" ]]; then
    >&2 echo 'please pick a valid branch!'
    return 1
  fi

  if [[ "$branch_name" == 'remotes'* ]]; then
    local_branch_name=$(echo "$branch_name" | cut -d '/' -f 3-)
    git checkout -B "$local_branch_name" -t "$branch_name"
  else
    git checkout "$branch_name"
  fi
}

#
# Find and Replace
#
far() {
  if [[ -z $1 || -z $2 ]]; then
    >&2 echo 'Usage: far find_pattern replace_pattern'
    return 1
  fi

  if ! hash rg; then
    >&2 echo 'rg is missing, please install it first.'
    return 1
  fi

  if ! hash sed; then
    >&2 echo 'sed is missing, please install it first.'
    return 1
  fi

  rg --files-with-matches --fixed-strings "$1" | \
    xargs --no-run-if-empty \
    sed --in-place "s|$1|$2|g"
}

split_pdf()
{
  convert -density 150 -quality 90 "$1" page-%0d.jpg
}

join_by()
{
  local d=$1; shift; echo -n "$1"; shift; printf "%s" "${@/#/$d}";
}

pg() {
  if [[ $# -eq 0 ]]; then
    echo 'Usage:'
    echo 'pg KEYWORDS'
    return 0
  fi
  ps --format user,pid,tname,bsdstart,cmd | head -1
  ps -e --format user,pid,tname,bsdstart,cmd | \
    grep -vw 'grep' | \
    grep --color=auto "$@"
}

# pg()
# {
#   ps -eo user,pid,ppid,bsdstart,etime,cmd --sort etime |\
#     grep -v 'grep' |\
#     grep -E --color=auto "PID|$1"
# }

get_dpi()
{
  display_info="$(xrandr | grep -w connected)"

  resolution=$(grep -oP '\d{4}x\d{4}' <<<"$display_info")
  r_x=$(cut -d 'x' -f 1 <<< "$resolution")
  r_y=$(cut -d 'x' -f 2 <<< "$resolution")

  >&2 echo "r_x: $r_x"
  >&2 echo "r_y: $r_y"

  ! read -r -d "\n" s_x s_y <<< "$(grep -oP '\d{3,4}mm' <<< "$display_info")"
  s_x=${s_x::-2}
  s_y=${s_y::-2}

  >&2 echo "s_x: $s_x"
  >&2 echo "s_y: $s_y"

  dpi=$(echo "sqrt( ($r_x * $r_y) / (($s_x / 25.4) * ($s_y / 25.4)) )" | bc -l)
  dpi=$(printf "%.0f" "$dpi")
  echo "$dpi"
}

get_font_size_by_dpi()
{
  dpi=$(get_dpi)
  font_size=$(echo "$dpi / 14" | bc -l | xargs printf "%.0f")
  (>&2 echo "dpi: $dpi")
  echo "$font_size"
}

# export DEFAULT_TERM_FS=$(get_font_size_by_dpi)

#
# Greeting message
#
greeting () {
  printf -v day '%(%u)T'
  printf -v day_name '%(%A)T'
  local prefix
  prefix=$([[ $day -ge 5 ]] && echo 'happy' || echo 'good')
  echo "Have a $prefix $day_name, $USER!"
}

# file stats
fs() {
  if [ -n "$1" ]; then
    local dir="$1"
  else
    local dir=$(pwd)
  fi
  find "$dir" -maxdepth 1 -type f -exec wc -l {} \; | column -t | sort -n
}

history_magic() {
  # FIXME
  # this crap is somehow broken on my current work setup, need to figure
  # out why
  # - [ ] how the original history works
  # - [ ] what's my desired behaviour
  # - [ ] what cannot be done by pure bash history
  # - [ ] figure out the easiest way to fill the gap
  #
  # bash history with multiple sessions are screwed, let's manually
  # manage it, this function will be trigger on bash exit, and:
  # - filter out entries from $HISTIGNORE
  # - remove duplicates while keep order
  # - optionally show stats if running manually with verbose tag
  #
  echo 'doing history magic...'
  time_start=$(date +%s)
  local lines_before
  local lines_after
  local lines_removed
  local tmp_file
  local IFS=:
  local verbose=$1

  src_file="${HISTFILE:?}"
  tmp_file="/tmp/bash_history_tmp_$(date +'%N')"
  lines_before=$(wc -l "$src_file")

  regex="${HISTIGNORE//\*\:/|}"
  sed "/^($regex)/d" "$src_file" | awk '!seen[$0]++' > "$tmp_file"

  mv -f "$tmp_file" "$src_file"

  if [[ ! $verbose ]]; then
    time_ends=$(date +%s)
    secs=$(((time_ends - time_start) / 1000))
    echo "Nothing changed! $secs s"
    return 0
  fi

  lines_after=$(wc -l "$src_file")
  lines_removed=$((lines_before - lines_after))

  if [[ $lines_removed -eq 0 ]]; then
    echo "your bash history is clean and tidy!"
  elif [[ $lines_removed -eq 1 ]]; then
    echo "removed 1 line from history!"
  else
    echo "removed ${lines_removed} lines from history!"
  fi

  time_ends=$(date +%s)
  secs=$(((time_ends - time_start) / 1000))
  sleep 5
  echo "Finished in $secs s"
}
# only do this for interactive shell
# referred in Vim
# FIXME this is buggy will lost histories
# case $- in
#   *i*) trap history_magic EXIT;;
# esac

#
# easy extract
# make sure we output to a dir to avoid surprises
# TODO
# - double check if cmds other than tar extract to directly
# - even better UX: detect if there is a top level folder in the archive
#   then create a directory only if necessary
#
extract () {
  if [ -f "$1" ] ; then
    case "$1" in
      *.tar.bz2)  mkdir -p "${1::-8}";  tar xvjf  "$1" -C "${1::-8}"  ;;
      *.tar.gz)   mkdir -p "${1::-7}";  tar xvzf  "$1" -C "${1::-7}"  ;;
      *.tar.xz)   mkdir -p "${1::-7}"; tar xvf  "$1" -C "${1::-7}"    ;;
      *.7z)       7z x "$1"                                           ;;
      *.Z)        uncompress "$1"                                     ;;
      *.bz2)      bunzip2 "$1"                                        ;;
      *.gz)       gunzip "$1"                                         ;;
      *.rar)      rar x "$1"                                          ;;
      *.tar)      mkdir -p "${1::-4}";  tar xvf   "$1" -C "${1::-4}"  ;;
      *.tbz2)     mkdir -p "${1::-5}"; tar xvjf "$1" -C "${1::-5}"    ;;
      *.tgz)      mkdir -p "${1::-4}";  tar xvzf  "$1" -C "${1::-4}"  ;;
      *.zip)      mkdir -p "${1::-4}";  unzip "$1" -d "${1::-4}"      ;;
      *)          echo "don't know how to extract $1..."              ;;
    esac
  else
    echo "$1 not found!"
  fi
}

# makes directory then moves into it
function mkcdr {
  mkdir -p -v "$1"
  cd "$1" || return
}

# Creates an archive from given directory
mktar() { tar cvf  "${1%%/}.tar"     "${1%%/}/"; }
mktgz() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }
mktbz() { tar cvjf "${1%%/}.tar.bz2" "${1%%/}/"; }

# cleanof - clean files older than specific days
cleanof ()
{
  find . -mtime +"$1" -print0 | xargs -0 -r /bin/rm -Rf
}

#
# just for fun
#
# shellcheck disable=SC2154
retrogame ()
{
  # assign all the variants of foreground and background colors to local
  # variable for later use, note the value of f, b are expanded within
  # substitution with exclamation mark.
  # the code below dynamically assign color code 30..47 to f0..f7 and b0..b7
  # respectively
  # shellcheck disable=SC2034
  f=3
  # shellcheck disable=SC2034
  b=4
  for j in 'f' 'b'; do
    for i in {0..7}; do
      printf -v "$j$i" %b "\e[${!j}${i}m"
    done
  done
  bld=$'\e[1m'
  rst=$'\e[0m'

  case $1 in
    invaders)
      cat <<EOF
${f1}  ▀▄   ▄▀     ${f2} ▄▄▄████▄▄▄    ${f3}  ▄██▄     ${f4}  ▀▄   ▄▀     ${f5} ▄▄▄████▄▄▄    ${f6}  ▄██▄  $rst
${f1} ▄█▀███▀█▄    ${f2}███▀▀██▀▀███   ${f3}▄█▀██▀█▄   ${f4} ▄█▀███▀█▄    ${f5}███▀▀██▀▀███   ${f6}▄█▀██▀█▄$rst
${f1}█▀███████▀█   ${f2}▀▀███▀▀███▀▀   ${f3}▀█▀██▀█▀   ${f4}█▀███████▀█   ${f5}▀▀███▀▀███▀▀   ${f6}▀█▀██▀█▀$rst
${f1}▀ ▀▄▄ ▄▄▀ ▀   ${f2} ▀█▄ ▀▀ ▄█▀    ${f3}▀▄    ▄▀   ${f4}▀ ▀▄▄ ▄▄▀ ▀   ${f5} ▀█▄ ▀▀ ▄█▀    ${f6}▀▄    ▄▀$rst
$bld
${f1}▄ ▀▄   ▄▀ ▄   ${f2} ▄▄▄████▄▄▄    ${f3}  ▄██▄     ${f4}▄ ▀▄   ▄▀ ▄   ${f5} ▄▄▄████▄▄▄    ${f6}  ▄██▄
${f1}█▄█▀███▀█▄█   ${f2}███▀▀██▀▀███   ${f3}▄█▀██▀█▄   ${f4}█▄█▀███▀█▄█   ${f5}███▀▀██▀▀███   ${f6}▄█▀██▀█▄
${f1}▀█████████▀   ${f2}▀▀▀██▀▀██▀▀▀   ${f3}▀▀█▀▀█▀▀   ${f4}▀█████████▀   ${f5}▀▀▀██▀▀██▀▀▀   ${f6}▀▀█▀▀█▀
${f1} ▄▀     ▀▄    ${f2}▄▄▀▀ ▀▀ ▀▀▄▄   ${f3}▄▀▄▀▀▄▀▄   ${f4} ▄▀     ▀▄    ${f5}▄▄▀▀ ▀▀ ▀▀▄▄   ${f6}▄▀▄▀▀▄▀▄$rst


                                      ${f7}▌$rst

                                    ${f7}▌$rst

                              ${f7}    ▄█▄    $rst
                              ${f7}▄█████████▄$rst
                              ${f7}▀▀▀▀▀▀▀▀▀▀▀$rst
EOF
;;

    pacman)
      cat <<EOF
      ${f3}  ▄███████▄   ${f1}  ▄██████▄    ${f2}  ▄██████▄    ${f4}  ▄██████▄    ${f5}  ▄██████▄    ${f6}  ▄██████▄
      ${f3}▄█████████▀▀  ${f1}▄${f7}█▀█${f1}██${f7}█▀█${f1}██▄  ${f2}▄${f7}█▀█${f2}██${f7}█▀█${f2}██▄  ${f4}▄${f7}█▀█${f4}██${f7}█▀█${f4}██▄  ${f5}▄${f7}█▀█${f5}██${f7}█▀█${f5}██▄  ${f6}▄${f7}█▀█${f6}██${f7}█▀█${f6}██▄
      ${f3}███████▀      ${f1}█${f7}▄▄█${f1}██${f7}▄▄█${f1}███  ${f2}█${f7}▄▄█${f2}██${f7}▄▄█${f2}███  ${f4}█${f7}▄▄█${f4}██${f7}▄▄█${f4}███  ${f5}█${f7}▄▄█${f5}██${f7}▄▄█${f5}███  ${f6}█${f7}▄▄█${f6}██${f7}▄▄█${f6}███
      ${f3}███████▄      ${f1}████████████  ${f2}████████████  ${f4}████████████  ${f5}████████████  ${f6}████████████
      ${f3}▀█████████▄▄  ${f1}██▀██▀▀██▀██  ${f2}██▀██▀▀██▀██  ${f4}██▀██▀▀██▀██  ${f5}██▀██▀▀██▀██  ${f6}██▀██▀▀██▀██
      ${f3}  ▀███████▀   ${f1}▀   ▀  ▀   ▀  ${f2}▀   ▀  ▀   ▀  ${f4}▀   ▀  ▀   ▀  ${f5}▀   ▀  ▀   ▀  ${f6}▀   ▀  ▀   ▀

      $bld${f3}  ▄███████▄   ${f1}  ▄██████▄    ${f2}  ▄██████▄    ${f4}  ▄██████▄    ${f5}  ▄██████▄    ${f6}  ▄██████▄
      $bld${f3}▄█████████▀▀  ${f1}▄${f7}█▀█${f1}██${f7}█▀█${f1}██▄  ${f2}▄${f7}█▀█${f2}██${f7}█▀█${f2}██▄  ${f4}▄${f7}█▀█${f4}██${f7}█▀█${f4}██▄  ${f5}▄${f7}█▀█${f5}██${f7}█▀█${f5}██▄  ${f6}▄${f7}█▀█${f6}██${f7}█▀█${f6}██▄
      $bld${f3}███████▀      ${f1}█${f7}▄▄█${f1}██${f7}▄▄█${f1}███  ${f2}█${f7}▄▄█${f2}██${f7}▄▄█${f2}███  ${f4}█${f7}▄▄█${f4}██${f7}▄▄█${f4}███  ${f5}█${f7}▄▄█${f5}██${f7}▄▄█${f5}███  ${f6}█${f7}▄▄█${f6}██${f7}▄▄█${f6}███
      $bld${f3}███████▄      ${f1}████████████  ${f2}████████████  ${f4}████████████  ${f5}████████████  ${f6}████████████
      $bld${f3}▀█████████▄▄  ${f1}██▀██▀▀██▀██  ${f2}██▀██▀▀██▀██  ${f4}██▀██▀▀██▀██  ${f5}██▀██▀▀██▀██  ${f6}██▀██▀▀██▀██
      $bld${f3}  ▀███████▀   ${f1}▀   ▀  ▀   ▀  ${f2}▀   ▀  ▀   ▀  ${f4}▀   ▀  ▀   ▀  ${f5}▀   ▀  ▀   ▀  ${f6}▀   ▀  ▀   ▀$rst
EOF
;;
    *) echo retro! ;;
  esac
}

#
# Fortune shines over you
#
bullshit()
{
  local cow_path
  local shuf
  local cow

  if [[ $OSTYPE == darwin* ]]; then
    cow_path="$(brew --cellar cowsay)"
    shuf='gshuf'
  else
    cow_path="$(cowsay -l | head -1 | awk '{ print substr($NF, 1, length($NF)-1) }')"
    shuf='shuf'
  fi

  cow=$(find "$cow_path" -name '*.cow' | command $shuf -n1)
  cowsay -f "$cow" "$(fortune)" | lolcat
}

#
# Some useful tips. TODO: add more tips for other frequently used apps
#
bulltruth()
{
  cowstates=(b d g p s t w t y)
  cowstate=${cowstates[$RANDOM % ${#cowstates[@]}]}
  git-tip | fold -s -w 60 | cowthink -"${cowstate}" -n | lolcat
}

#
# Show something randomly
# TODO add meme section
#
random_splash()
{
  magic_number=$((RANDOM + 1))
  local x

  if [[ $magic_number -gt 4096 ]]; then
    return
  fi

  if [[ $COLUMNS -lt 96 ]] || [[ $LINES -lt 16 ]]; then
    x=2
  elif [[ $COLUMNS -lt 128 ]] || [[ $LINES -lt 32 ]]; then
    x=4
  elif [[ $COLUMNS -lt 192 ]] || [[ $LINES -lt 48 ]]; then
    x=5
  else
    x=1
  fi

  case $((magic_number % x)) in
    0) greeting ;;
    1) bulltruth ;;
    2) bullshit ;;
    3) retrogame invaders ;;
    4) retrogame pacman ;;
  esac
}

archive_photo()
{
  # see https://developers.google.com/speed/docs/insights/OptimizeImages#optimizations-for-gif-png-and-jpeg-images
  # TODO
  # - [ ] still better to add different output filename support
  mogrify \
    -resize 1920x1080 \
    -sampling-factor 4:2:0 \
    -strip \
    -quality 85 \
    -interlace JPEG \
    -colorspace sRGB \
    -format jpg "$@"
}

open_captive_portal()
{
  # XXX
  # - Chrome will be installed anyway
  # - apple's captive site looks the most reliable one
  #
  # FIXME
  # - [ ] it is surprisingly hard to specify a fixed window size
  /usr/bin/google-chrome --incognito --disable-extensions --app=http://captive.apple.com
}

__.bash.reset_locales()
{
  # TODO
  # double check which one is the best practice
  # lang="${1:-'en_US.UTF-8'}"
  # >&2 echo "setting all the locales to $lang"
  sudo dpkg-reconfigure locales
  # sudo update-locale LANG="$lang"
  # sudo update-locale LANGUAGE="$lang"
  # sudo update-locale LC_CTYPE="$lang"
  # sudo update-locale LC_NUMERIC="$lang"
  # sudo update-locale LC_TIME="$lang"
  # sudo update-locale LC_COLLATE="$lang"
  # sudo update-locale LC_MONETARY="$lang"
  # sudo update-locale LC_MESSAGES="$lang"
  # sudo update-locale LC_PAPER="$lang"
  # sudo update-locale LC_NAME="$lang"
  # sudo update-locale LC_ADDRESS="$lang"
  # sudo update-locale LC_TELEPHONE="$lang"
  # sudo update-locale LC_MEASUREMENT="$lang"
  # sudo update-locale LC_IDENTIFICATION="$lang"
  # sudo update-locale LC_ALL="$lang"
}

# FIXME this has to be put here because it breaks syntax highlight
path() {
  echo "${PATH//:/$'\n'}"
}

pp() {
  python -m pytest -sxvvv "$@"
}

diff_dir() {
  src_dir=$1
  tgt_dir=$2
  diff -Naur "${src_dir:?}" "${tgt_dir:?}" | delta --side-by-side
}

# vim: set ai ts=2 tw=79:
