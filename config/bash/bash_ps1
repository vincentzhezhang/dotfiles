#! /usr/bin/env bash
#
# XXX no single function in this file can take more than 50ms to execute, that's the rule
#
# TODO
# - fix branch name detection with dot
# - fix git status detection after rebase
#

#
# basic setups
#
PS1_UPDATE_THRESHOLD=167
PS1_MINIMUM_COLUMN_WIDTH=60

# SSH detection, courtesy https://unix.stackexchange.com/a/9607
if [[ -n "$SSH_CLIENT" ]] || [[ -n "$SSH_TTY" ]]; then
  PS1_REMOTE_SESSION=remote/ssh
else
  case $(ps -o comm= -p $PPID) in
    sshd|*/sshd) PS1_REMOTE_SESSION=remote/ssh;;
  esac
fi

# benchmark ~= 5.84 ms
__.ps1.status_line() {
  # FIXME
  # - length calculation of full-width character is broken
  # TODO
  # - fit paths as much as possible before abbreviate it
  #   e.g. /s/v/workspace/webapp/vol_tracker instead of /s/v/w/vol_tracker
  #   create a dash line which has a length of the current terminal columns minus
  #   user@hostname, time string and padding spaces
  local host_str
  local time_str
  local dash_line
  local dash_line_padding=2 # spaces before and after the dash line
  local dash_line_width=0
  local dash_color="$BASE00"

  if [[ -n "$PS1_REMOTE_SESSION" ]]; then
    dash_color="$BYELLOW"
    host_str="$(hostname):"
  fi

  pwd_str=$(readlink -f "$PWD")

  if [[ ${#pwd_str} -gt $(( 2 * COLUMNS / 3 )) ]]; then
    echo -e "${dash_color}.../$(basename "$PWD")${COFF}\\n"
    return 0
  elif [[ ${#pwd_str} -gt $(( COLUMNS / 2)) ]]; then
    pwd_str="$(sed "s:\\([^/]\\)[^/]*/:\\1/:g" <<< "$pwd_str")"
  fi

  time_str="$(date +'%H:%M:%S')"

  dash_line_width=$((COLUMNS - ${#host_str} - ${#pwd_str} - ${#time_str} - dash_line_padding))

  while [[ $dash_line_width -gt 0 ]]
  do
    dash_line="-${dash_line}"
    ((dash_line_width-=1))
  done

  echo -e "${dash_color}${host_str}${pwd_str} ${dash_line} ${time_str}${COFF}"
}

someone_goes_nuts()
{
  local now
  local last_update="$PS1_LAST_UPDATED_AT"
  now=$(($(date +%s%3N)))
  PS1_LAST_UPDATED_AT=$now

  [[ $((now - last_update)) -lt $PS1_UPDATE_THRESHOLD ]]
}

# benchmark < 0.10 ms
__.ps1.last_status()
{
  local last_exit_code=$1
  [[ $last_exit_code -eq 0 ]] && echo "${BGREEN}:) ${COFF}" || echo "${BRED}:( ${COFF}"
}

# XXX
# last perf: avg: 48.5 ms (4ms overhead for existence check, note 2>/dev/null seems won't speed up)
# tested with status: (m35d11u3|A1M5R1)
# benchmark ~= 50.88 ms
# benchmark of inner git func ~= 45.62 ms
#
# NOTE CPU load is very low so what's going on?
# TODO
# - sounds like CPU is waiting for IO, redo the benchmark after new disk installed
__.ps1.version_control()
{
  # XXX Only support git for now
  local prompt=''

  if hash __.git.ps1 2>&1 ; then
    prompt+=$(__.git.ps1)
  fi

  echo "$prompt"
}

# benchmark ~= 14.69 ms
# benchmark of inner conda func ~= 13.57 ms
__.ps1.virtual_env()
{
  # TODO
  # - other virtual env detections if necessary
  local prompt=''

  if hash __.conda.ps1 2>&1 ; then
    prompt+=$(__.conda.ps1)
  fi

  echo "$prompt"
}

__.ps1() {
  #
  # main function to generate PS1
  #
  # The current refined pure bash built-ins implementation can generate a
  # relatively complex PS1 in less than 100 ms in the alacritty repo with 1053
  # commits and 184 files:
  #
  # tetsdasf » origin/master ∗  1↱ 28↲ (u2m30d10t1|A7M8D3T1R1) 269938:54 # py36
  #
  # TODO
  # - check if possible to reduce the whole thing under 17ms, so we can achieve 60 fps terminal!
  #   - this implies may need to use external compiled apps and/or background service
  #   - async
  local last_exit_code=$?

  if someone_goes_nuts; then
    # XXX throttle workaround, can have better solution
    return
  fi

  # perf
  local perf_start
  local perf_end
  local t
  perf_start=$(date +%s%3N)

  PS1=''

  local line_1
  line_1="$(__.ps1.status_line)"

  if [[ -n "$line_1" ]]; then
    PS1+="$line_1\\n"
  fi

  local line_2
  version_control_str="$(__.ps1.version_control)"
  virtual_env_str="$(__.ps1.virtual_env)"
  line_2="${version_control_str}${virtual_env_str}"

  if [[ -n "$line_2" ]]; then
    PS1+="$line_2\\n"
  fi

  local line_3
  local last_status
  last_status="$(__.ps1.last_status $last_exit_code)"
  line_3="$last_status"

  if [[ -n "$line_3" ]]; then
    PS1+="$line_3"
  fi

  perf_end=$(date +%s%3N)
  t=$((perf_end - perf_start))

  if [[ $t -gt 100 ]]; then
    >&2 echo "PS1 took $t ms!"
  fi
}

PROMPT_COMMAND="__.ps1; $PROMPT_COMMAND"
