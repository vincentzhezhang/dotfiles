#! /usr/bin/env bash
#
# XXX no single function in this file can take more than 50ms to execute, that's the rule
#
# TODO
# - fix branch name detection with dot
# - fix git status detection after rebase
#

#
# basic setups
#
PS1_UPDATE_THRESHOLD=167
PS1_MINIMUM_COLUMN_WIDTH=60

# SSH detection, courtesy https://unix.stackexchange.com/a/9607
if [[ -n "$SSH_CLIENT" ]] || [[ -n "$SSH_TTY" ]]; then
  PS1_REMOTE_SESSION=remote/ssh
else
  case $(ps -o comm= -p $PPID) in
    sshd|*/sshd) PS1_REMOTE_SESSION=remote/ssh;;
  esac
fi

#
# git prompt snippet, use plumbing commands for reliable states parsing
#
# TODO this worth a rework, should be able to make it much simpler without
# using anything else other than bash & git
git_prompt()
{
  git_dir="$(git rev-parse --git-dir 2> /dev/null)"

  if [[ -z $git_dir ]]; then
    return 2
  fi

  if [[ -f "$git_dir/REBASE_HEAD" ]]; then
    echo "${BRED}[-R-]${COFF}"
    return
  fi

  if [[ -f "$git_dir/MERGE_HEAD" ]]; then
    echo "${BRED}[-M-]${COFF}"
    return
  fi

  raw_status="$(git status --branch --porcelain 2> /dev/null)"
  branch_info=$(echo "$raw_status" | head -1)
  # change_info=$(echo "$raw_status" | tail -n +2)
  simplified_change_info=$(echo "$raw_status" | tail -n +2 | cut -c -2)

  local dirty_state
  local staged_state

  local modified_count=0
  local deleted_count=0
  local type_changed_count=0
  local untracked_files_count=0
  local staged_new_count=0
  local staged_modified_count=0
  local staged_type_changed_count=0
  local staged_deleted_count=0
  local staged_renamed_files_count=0

  # see:
  # https://unix.stackexchange.com/questions/169716/why-is-using-a-shell-loop-to-process-text-considered-bad-practice
  while IFS= read -r tag; do
    if [[ "$tag" == *'M' ]]; then ((modified_count++));             fi
    if [[ "$tag" == *'D' ]]; then ((deleted_count++));              fi
    if [[ "$tag" == *'T' ]]; then ((type_changed_count++));         fi
    if [[ "$tag" == '??' ]]; then ((untracked_files_count++));      fi

    if [[ "$tag" == 'A'* ]]; then ((staged_new_count++));           fi
    if [[ "$tag" == 'M'* ]]; then ((staged_modified_count++));      fi
    if [[ "$tag" == 'T'* ]]; then ((staged_type_changed_count++));  fi
    if [[ "$tag" == 'D'* ]]; then ((staged_deleted_count++));       fi
    if [[ "$tag" == 'R'* ]]; then ((staged_renamed_files_count++)); fi
  done <<<"$simplified_change_info"

  #   >&2 echo -n $modified_count-
  #   >&2 echo -n $deleted_count-
  #   >&2 echo -n $type_changed_count-
  #   >&2 echo -n $untracked_files_count-
  #   >&2 echo -n $staged_new_count-
  #   >&2 echo -n $staged_modified_count-
  #   >&2 echo -n $staged_type_changed_count-
  #   >&2 echo -n $staged_deleted_count-
  #   >&2 echo -n $staged_renamed_files_count-
  #   >&2 echo
  #
  #   modified_count=0
  #   deleted_count=0
  #   type_changed_count=0
  #   untracked_files_count=0
  #   staged_new_count=0
  #   staged_modified_count=0
  #   staged_type_changed_count=0
  #   staged_deleted_count=0
  #   staged_renamed_files_count=0
  #
  #   if [[ -n $change_info ]]; then
  #     #
  #     # NOTE: for matching patterns, please refer to git status manual
  #     #
  #     # stats for files not staged
  #     modified_count=$(echo "$change_info" | grep -E '^.M' --count)
  #     deleted_count=$(echo "$change_info" | grep -E '^.D' --count)
  #     type_changed_count=$(echo "$change_info" | grep -E '^.T' --count)
  #     untracked_files_count=$(echo "$change_info" | grep -E '^\?\? ' --count)
  #
  #     # stats for staged files
  #     local staged_state=''
  #     staged_new_count=$(echo "$change_info" | grep -E '^A' --count)
  #     staged_modified_count=$(echo "$change_info" | grep -E '^M' --count)
  #     staged_type_changed_count=$(echo "$change_info" | grep -E '^T' --count)
  #     staged_deleted_count=$(echo "$change_info" | grep -E '^D' --count)
  #     staged_renamed_files_count=$(echo "$change_info" | grep -E '^R ' --count)
  #   fi
  #
  #   >&2 echo -n $modified_count-
  #   >&2 echo -n $deleted_count-
  #   >&2 echo -n $type_changed_count-
  #   >&2 echo -n $untracked_files_count-
  #   >&2 echo -n $staged_new_count-
  #   >&2 echo -n $staged_modified_count-
  #   >&2 echo -n $staged_type_changed_count-
  #   >&2 echo -n $staged_deleted_count-
  #   >&2 echo -n $staged_renamed_files_count-
  #   >&2 echo


  if [[ $modified_count -gt 0 ]]; then
    unstaged_state+="${BLUE}m${modified_count}${COFF}"
  fi

  if [[ $deleted_count -gt 0 ]]; then
    unstaged_state+="${RED}d${deleted_count}${COFF}"
  fi

  if [[ $type_changed_count -gt 0 ]]; then
    unstaged_state+="${YELLOW}t${type_changed_count}${COFF}"
  fi

  if [[ $untracked_files_count -gt 0 ]]; then
    unstaged_state+="${BASE1}u${untracked_files_count}${COFF}"
  fi

  if [[ $staged_new_count -gt 0 ]]; then
    staged_state+="${BGREEN}A${staged_new_count}${COFF}"
  fi

  if [[ $staged_modified_count -gt 0 ]]; then
    staged_state+="${BBLUE}M${staged_modified_count}${COFF}"
  fi

  if [[ $staged_deleted_count -gt 0 ]]; then
    staged_state+="${BRED}D${staged_deleted_count}${COFF}"
  fi

  if [[ $staged_type_changed_count -gt 0 ]]; then
    staged_state+="${BYELLOW}T${staged_type_changed_count}${COFF}"
  fi

  if [[ $staged_renamed_files_count -gt 0 ]]; then
    staged_state+="${BCYAN}R${staged_renamed_files_count}${COFF}"
  fi

  if [[ -n "$unstaged_state" ]]; then
    dirty_state+="$unstaged_state"
  fi

  if [[ -n "$unstaged_state" && -n "$staged_state" ]]; then
    dirty_state+="${YELLOW}|${COFF}"
  fi

  if [[ -n "$staged_state" ]]; then
    dirty_state+="$staged_state"
  fi

  if [[ -n "$dirty_state" ]]; then
    dirty_state="${CYAN}(${COFF}${dirty_state}${CYAN})${COFF}"
  fi

  # XXX < 0.03s til here

  # only check status against tracking upstream when it exists and not gone
  local local_prompt
  local tracking_state
  local remote_prompt


  if grep -q 'No commits yet' <<<"$branch_info"; then
    current_branch='[new]'
  else
    current_branch=$(git rev-parse --abbrev-ref HEAD)
  fi

  local_prompt="${CYAN}${current_branch}${COFF}"

  tracking_branch=$(2> /dev/null git rev-parse --abbrev-ref --symbolic-full-name '@{u}')

  # XXX < 0.035s til here

  if [[ -n "$tracking_branch" ]]; then
    remote_name=${tracking_branch%"/$current_branch"}

    branch_meta=$(echo "$branch_info" | grep -oP '(\[[^]]+\])')
    gone=$(echo "$branch_meta" | grep gone)
    ahead=$(echo "$branch_meta" | grep -oP 'ahead (\K[0-9]+)')
    behind=$(echo "$branch_meta" | grep -oP 'behind (\K[0-9]+)')

    if [[ -n "$gone" ]]; then
      remote_name+="[gone]"
    fi

    # ↑↓
    if [[ -n "$ahead" ]]; then
      tracking_state+="${CYAN}${ahead}↑${COFF}"
    fi

    if [[ -n "$behind" ]]; then
      tracking_state+="${MAGENTA}${behind}↓${COFF}"
    fi
  else
    tracking_state="${BLUE}?${COFF}"
  fi

  # »«
  if [[ -n "$remote_name" ]]; then
    remote_prompt="${BYELLOW} » ${COFF}${MAGENTA}${remote_name}${COFF}"
  fi

  if [[ -n "$tracking_state" ]]; then
    tracking_state="${tracking_state}"
  fi

  diff="${tracking_state}${dirty_state}"

  if [[ -n "$diff" ]]; then
    diff=" ${BYELLOW}*${COFF} ${diff}"
  fi

  git_dir=$(git rev-parse --git-dir)

  fetch_head="$git_dir/FETCH_HEAD"
  if [[ -f $fetch_head ]]; then
    last_updated_at=$(stat -c %Y "$fetch_head")
    now=$(date +%s)
    seconds_elapsed=$((now - last_updated_at))

    mins=$((seconds_elapsed / 60))
    seconds_elapsed=$((seconds_elapsed % 60))

    # TODO better name
    bbq=" ${BASE0}$mins:$(printf "%02d" $seconds_elapsed)${COFF}"
  else
    bbq=''
  fi

  # XXX < 0.042s til here
  echo "${local_prompt}${remote_prompt}${diff}${bbq}"
}

# TODO this is just a temporary solution that sufficient enough for current works, should add
# - node/npm version detection
# - ruby version detection
# - use named color codes instead of explicit numbers
v_env_conda() {
  local current_py_env
  local detected_conda_env

  detected_conda_env=$(clever_conda_path | xargs --no-run-if-empty basename)
  # (>&2 echo "detected: $detected_conda_env")
  current_py_env=$(grep -oP '\/.*conda.*/envs/(\K\w+)' <<< "$PATH")
  # (>&2 echo "current: $current_py_env")

  if [[ -z "$detected_conda_env" ]] && [[ -z "$current_py_env" ]]; then
    unset __python_venv_name
    return
  fi

  if [[ "$current_py_env" != "$__python_venv_name" ]]; then
    # (>&2 echo "current_py_env: $current_py_env")
    # (>&2 echo "__python_venv_name: $__python_venv_name")
    __python_venv_name="$current_py_env"
  fi

  if [[ -n "$current_py_env" ]]; then
    echo -n "\\[\\e[0;38;5;2m\\]"
    echo -n ' # '

    if [[ -n "$detected_conda_env" ]] && [[ "$detected_conda_env" != "$current_py_env" ]]; then
      echo -n "\\[\\e[2;38;5;2m\\]"
      echo -n "$detected_conda_env"
      echo -n "\\[\\e[0m\\] "
    fi

    echo -n "\\[\\e[0;38;5;2m\\]"
    echo -n "$__python_venv_name"
    echo -n "\\[\\e[0m\\] "
  else
    echo -n "\\[\\e[2;38;5;2m\\]"
    echo -n ' # '
    echo -n "$detected_conda_env"
    echo -n "\\[\\e[0m\\] "
  fi
}

generate_status_line() {
  # TODO fit paths as much as possible before abbreviate it
  # e.g. /s/v/workspace/webapp/vol_tracker instead of /s/v/w/vol_tracker
  # create a dash line which has a length of the current terminal columns minus
  # user@hostname, time string and padding spaces
  local host_str
  local time_str
  local dash_line
  local dash_line_padding=2 # spaces before and after the dash line
  local dash_line_width=0
  local dash_color="$BASE00"

  if [[ -n "$PS1_REMOTE_SESSION" ]]; then
    dash_color="$BYELLOW"
    host_str="$(hostname):"
  fi

  pwd_str=$(readlink -f "$PWD")

  if [[ ${#pwd_str} -gt $(( 2 * COLUMNS / 3 )) ]]; then
    echo -e "${dash_color}.../$(basename "$PWD")${COFF}\\n"
    return 0
  elif [[ ${#pwd_str} -gt $(( COLUMNS / 2)) ]]; then
    pwd_str="$(sed "s:\\([^/]\\)[^/]*/:\\1/:g" <<< "$pwd_str")"
  fi

  time_str="$(date +'%H:%M:%S')"

  dash_line_width=$((COLUMNS - ${#host_str} - ${#pwd_str} - ${#time_str} - dash_line_padding))

  while [[ $dash_line_width -gt 0 ]]
  do
    dash_line="-${dash_line}"
    ((dash_line_width-=1))
  done

  echo -e "${dash_color}${host_str}${pwd_str} ${dash_line} ${time_str}${COFF}"
}

someone_goes_nuts()
{
  local now
  local last_update="$PS1_LAST_UPDATED_AT"
  now=$(($(date +%s%3N)))
  PS1_LAST_UPDATED_AT=$now

  [[ $((now - last_update)) -lt $PS1_UPDATE_THRESHOLD ]]
}

generate_last_state()
{
  local last_exit_code=$1
  [[ $last_exit_code -eq 0 ]] && echo "${BGREEN}:) ${COFF}" || echo "${BRED}:( ${COFF}"
}

# FIXME
# - length calculation of full-width character is broken
# - the aim is to keep this function runs under 50ms, which means:
#   - TODO no single subroutine should exceed 50ms
#   - TODO use async if possible
prettify_prompt() {
  local last_exit_code=$?

  if someone_goes_nuts; then
    return
  fi

  last_state="$(generate_last_state $last_exit_code)"

  if [[ $COLUMNS -le $PS1_MINIMUM_COLUMN_WIDTH ]]; then
    PS1="$last_state"
    return
  fi

  git_str="$(git_prompt)"
  v_env_str="$(v_env_conda)"
  status_line="$(generate_status_line)"
  env_line="${git_str}${v_env_str}"


  # FIXME use join_by to add delimiters nicely
  if [[ -n "$env_line" ]]; then
    env_line="$env_line\\n"
  fi


  PS1="$status_line\n$env_line$last_state"
}

PROMPT_COMMAND="prettify_prompt; $PROMPT_COMMAND"
